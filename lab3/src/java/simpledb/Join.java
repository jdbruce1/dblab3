package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    
    //global variables
    JoinPredicate p;
    DbIterator child1;
    DbIterator child2;
    TupleDesc td1;
    TupleDesc td2;
    TupleDesc tdmerge;
    Tuple next1;
    Tuple next2;
    boolean no_more_tuples;
    
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here  	
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	this.td1 = this.child1.getTupleDesc();
    	this.td2 = this.child2.getTupleDesc();
    	this.tdmerge = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc()); 	
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.td1.getFieldName(this.p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.td2.getFieldName(this.p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return tdmerge;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	this.child1.open();
    	this.child2.open();
    	this.next1 = null;
    	this.next2 = null;
    	this.no_more_tuples = false;
    }

    public void close() {
        // some code goes here
    	super.close();
    	this.child1.close();
    	this.child2.close();  	
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here  	
    	this.close();
    	this.open();  	
    	this.child1.rewind();
    	this.child2.rewind();  	
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	//if we've already iterated through and found nothing then return null
    	if(this.no_more_tuples){
    		return null;
    	}
    	
    	//get the next tuples for child1 and child2
    	if(this.next1 == null && child1.hasNext()){
    		next1 = child1.next();
    	}  	
    	if(this.next2 == null && child2.hasNext()){
    		next2 = child2.next();
    	}
    	
    	Tuple answer;
    	int len1 = td1.numFields();
    	int lenmerge = tdmerge.numFields();
    	  	    	
    	while(next1 != null){		
    		while(next2 != null){
    			//while both next1/next2 exist
    			
    			//look through all combinations of next1 and next2
					//if filter is true for both then create a new tuple 
					//and updates its fields to contain next1 and next2
    			if(this.p.filter(next1, next2)){
    				answer = new Tuple(this.tdmerge);
    				for(int i=0;i<lenmerge;i++){
    					if(i<len1){
    						answer.setField(i, next1.getField(i));
    					}
    					else{
    						answer.setField(i, next2.getField(i-len1));
    					}
    				}
    				
    				if(child2.hasNext()){
    					next2 = child2.next();
    				}else{
    					//nothing was found in child2, so rewind it so we can start over
    						//when we move on to the next in child1
    					child2.rewind();
    					if(child1.hasNext()){
    						this.next1 = child1.next();
    					}else{
    						//nothing found in next1
    						this.next1 = null;
    						this.no_more_tuples = true;
    					}
    					if(child2.hasNext()){
    						this.next2 = child2.next();
    					}else{
    						//nothing found in next1
    						this.next1 = null;
    						this.no_more_tuples = true;
    					}
    				}
    				
    				return answer;
    			}
    			if(child2.hasNext()){
    				next2 = child2.next();
    			}else{
    				break;
    				}
    			}
    		
    		if(child1.hasNext()){
    			next1= child1.next();
    			child2.rewind();
    		}else{
    			this.next1 = null;
    			this.next2 = null;
    			this.no_more_tuples = true;
    			break;
    		}	
    	}
    	
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	DbIterator[] children_array = new DbIterator[2];
    	children_array[0] = this.child1;
    	children_array[1] = this.child2;
        return children_array;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
    	this.child2 = children[1];
    }

}
