package simpledb;

import java.io.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * BufferPool manages the reading and writing of pages into memory from
 * disk. Access methods call into it to retrieve pages, and it fetches
 * pages from the appropriate location.
 * <p>
 * The BufferPool is also responsible for locking;  when a transaction fetches
 * a page, BufferPool checks that the transaction has the appropriate
 * locks to read/write the page.
 * 
 * @Threadsafe, all fields are final
 */
public class BufferPool {
    /** Bytes per page, including header. */
    private static final int PAGE_SIZE = 4096;

    private static int pageSize = PAGE_SIZE;
    
    /** Default number of pages passed to the constructor. This is used by
    other classes. BufferPool should use the numPages argument to the
    constructor instead. */
    public static final int DEFAULT_PAGES = 50;
    
     final ConcurrentHashMap<PageId, Page> pages;
     final int numPages;
     

     /**
     * Creates a BufferPool that caches up to numPages pages.
     *
     * @param numPages maximum number of pages in this buffer pool.
     */
    public BufferPool(int numPages) {
    	pages = new ConcurrentHashMap<PageId, Page>();
    	this.numPages = numPages;
    }
    
    public static int getPageSize() {
      return pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void setPageSize(int pageSize) {
    	BufferPool.pageSize = pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void resetPageSize() {
    	BufferPool.pageSize = PAGE_SIZE;
    }

    /**
     * Retrieve the specified page with the associated permissions.
     * Will acquire a lock and may block if that lock is held by another
     * transaction.
     * <p>
     * The retrieved page should be looked up in the buffer pool.  If it
     * is present, it should be returned.  If it is not present, it should
     * be added to the buffer pool and returned.  If there is insufficient
     * space in the buffer pool, an page should be evicted and the new page
     * should be added in its place.
     *
     * @param tid the ID of the transaction requesting the page
     * @param pid the ID of the requested page
     * @param perm the requested permissions on the page
     */
    public  Page getPage(TransactionId tid, PageId pid, Permissions perm)
        throws TransactionAbortedException, DbException {
    	
       Page p = pages.get(pid);
       if(p == null) {
    	   if(pages.size() >= numPages) {
    		   evictPage();
    	   }
    	   DbFile file = Database.getCatalog().getDatabaseFile(pid.getTableId());
    	   p = file.readPage(pid); 	   
           pages.put(pid, p);

       }
       return p;
       
    }

    /**
     * Releases the lock on a page.
     * Calling this is very risky, and may result in wrong behavior. Think hard
     * about who needs to call this and why, and why they can run the risk of
     * calling it.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param pid the ID of the page to unlock
     */
    public  void releasePage(TransactionId tid, PageId pid) {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /**
     * Release all locks associated with a given transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     */
    public void transactionComplete(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /** Return true if the specified transaction has a lock on the specified page */
    public boolean holdsLock(TransactionId tid, PageId p) {
        // some code goes here
        // not necessary for lab1|lab2
        return false;
    }

    /**
     * Commit or abort a given transaction; release all locks associated to
     * the transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param commit a flag indicating whether we should commit or abort
     */
    public void transactionComplete(TransactionId tid, boolean commit)
        throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /**
     * Add a tuple to the specified table on behalf of transaction tid.  Will
     * acquire a write lock on the page the tuple is added to and any other 
     * pages that are updated (Lock acquisition is not needed for lab2). 
     * May block if the lock(s) cannot be acquired.
     * 
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and adds versions of any pages that have 
     * been dirtied to the cache (replacing any existing versions of those pages) so 
     * that future requests see up-to-date pages. 
     *
     * @param tid the transaction adding the tuple
     * @param tableId the table to add the tuple to
     * @param t the tuple to add
     */
    public void insertTuple(TransactionId tid, int tableId, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
    	
    	//look up a file based on the passed parameters
    	DbFile file = Database.getCatalog().getDatabaseFile(tableId);
    	
    	//insert tuple into the file
    	ArrayList<Page>  arrP = file.insertTuple(tid, t);
    	
    	//iterate through all pages changed by insert and mark them as dirty
    	Iterator<Page> itP = arrP.iterator();
    	while(itP.hasNext()){
    		Page next = itP.next();    		
    		next.markDirty(true, tid);
    		//store page in the cache
    		this.pages.put(next.getId(), next);
    	}	 
    }

    /**
     * Remove the specified tuple from the buffer pool.
     * Will acquire a write lock on the page the tuple is removed from and any
     * other pages that are updated. May block if the lock(s) cannot be acquired.
     *
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and adds versions of any pages that have 
     * been dirtied to the cache (replacing any existing versions of those pages) so 
     * that future requests see up-to-date pages. 
     *
     * @param tid the transaction deleting the tuple.
     * @param t the tuple to delete
     */
    public void deleteTuple(TransactionId tid, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
    	
    	Page pageIn = Database.getBufferPool().getPage(tid, t.recId.getPageId(), Permissions.READ_WRITE);
    	
    	if(pageIn instanceof HeapPage){
    	
    	//get a page from bufferpool based on parameters passed
    		HeapPage page = (HeapPage) pageIn;
    		//delete the tuple from that page
        	page.deleteTuple(t);
        	
        	//mark page as dirty
        	page.markDirty(true,tid);

          	//store page in the cache
        	pages.put(page.getId(), page);
    		
    	}else if(pageIn instanceof BTreeLeafPage){
    		BTreeLeafPage page = (BTreeLeafPage) pageIn;
    		
    		page.deleteTuple(t);
    		
			

        	
    		if(page.getNumTuples() < page.getMaxTuples()/2){
    			BTreeLeafPage siblingPageL = null;
    			BTreeLeafPage siblingPageR = null;
    			PageId leftSiblingPageId = page.getLeftSiblingId();
    			PageId rightSiblingPageId = page.getRightSiblingId();
    			BTreeInternalPage parent = (BTreeInternalPage) this.getPage(tid, page.getParentId(), Permissions.READ_WRITE);
    			BTreeFile btfile = (BTreeFile) Database.getCatalog().getDatabaseFile(page.getId().getTableId());
    			boolean canMergeL = false;
    			boolean canMergeR = false;

    			
    			if(leftSiblingPageId != null){
    				siblingPageL = (BTreeLeafPage) this.getPage(tid, leftSiblingPageId, Permissions.READ_WRITE);
    				//check if enough to steal
    				
    				if(siblingPageL.getNumTuples() > siblingPageL.getMaxTuples()/2 ){
    					
    					
    					Iterator<BTreeEntry> parIt = parent.iterator();
    					BTreeEntry currEnt;
    					
    					while(parIt.hasNext()){
    						currEnt = parIt.next();
    						
    						if(currEnt.getLeftChild() == leftSiblingPageId){
    							if(currEnt.getRightChild() != page.getId()){
    								throw new DbException("something went wrong");
    							}
    	    					btfile.stealFromLeafPage(page, siblingPageL,parent , currEnt , false);
    							return;
    						}
    					}
    				}
    				
    				canMergeL = true;
    			}else if(rightSiblingPageId != null){
    				siblingPageR = (BTreeLeafPage) this.getPage(tid, rightSiblingPageId, Permissions.READ_WRITE);
    				//check if enough to steal
    				
    				if(siblingPageR.getNumTuples() > siblingPageR.getMaxTuples()/2 ){
    					
    					
    					Iterator<BTreeEntry> parIt = parent.iterator();
    					BTreeEntry currEnt;
    					
    					while(parIt.hasNext()){
    						currEnt = parIt.next();
    						
    						if(currEnt.getLeftChild() == page.getId()){
    							if(currEnt.getRightChild() != rightSiblingPageId){
    								throw new DbException("something went wrong");
    							}
    	    					btfile.stealFromLeafPage(page, siblingPageR,parent , currEnt , true);
    							return;
    						}
    					}
    				}
    				canMergeR = true;
    			}
    			
    			
    			if(canMergeL){
    				//merge
    				
    				Iterator<BTreeEntry> parIt = parent.iterator();
					BTreeEntry currEnt;
    				
    				while(parIt.hasNext()){
						currEnt = parIt.next();
						
						if(currEnt.getLeftChild() == leftSiblingPageId){
							if(currEnt.getRightChild() != page.getId()){
								throw new DbException("something went wrong");
							}
							btfile.mergeLeafPages(tid, new HashMap<PageId,Page>(), siblingPageL, page, parent, currEnt);
							return;
						}
    				}
    			}else if(canMergeR){
    				//merge
    			}else{
    				
    			}
    			
    		
    			
    			
    			
    		}
    		
        	//mark page as dirty
        	page.markDirty(true,tid);

          	//store page in the cache
        	pages.put(page.getId(), page);
    		
    	}else{
    		throw new DbException("page is not a type of page");
    	}
    	    	
    	
  
    	
    }

    /**
     * Flush all dirty pages to disk.
     * NB: Be careful using this routine -- it writes dirty data to disk so will
     *     break simpledb if running in NO STEAL mode.
     */
    public synchronized void flushAllPages() throws IOException {
        // some code goes here
        // not necessary for lab1

    	//get iterator for the cache
    	Iterator<PageId> keyIt = this.pages.keySet().iterator();
       	Page current;
    	
       	//iterate through cache
    	while(keyIt.hasNext()){
    		current = this.pages.get(keyIt.next());
    		
    		//if page is dirty, then flush the page
    		if(current.isDirty() != null){
    			this.flushPage(current.getId());
    		}	
    	}
    }

    /** Remove the specific page id from the buffer pool.
        Needed by the recovery manager to ensure that the
        buffer pool doesn't keep a rolled back page in its
        cache.
        
        Also used by B+ tree files to ensure that deleted pages
        are removed from the cache so they can be reused safely
    */
    public synchronized void discardPage(PageId pid) {
        // some code goes here
        // not necessary for lab1
    	
    	//remove the page from cache
    	this.pages.remove(pid);
    }

    /**
     * Flushes a certain page to disk
     * @param pid an ID indicating the page to flush
     */
    private synchronized  void flushPage(PageId pid) throws IOException {
        // some code goes here
        // not necessary for lab1
    	
    	//write the specified page to the file it belongs to
    	DbFile file = Database.getCatalog().getDatabaseFile(pid.getTableId());
    	file.writePage(this.pages.get(pid));
    }

    /** Write all pages of the specified transaction to disk.
     */
    public synchronized  void flushPages(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /**
     * Discards a page from the buffer pool.
     * Flushes the page to disk to ensure dirty pages are updated on disk.
     */
    private synchronized  void evictPage() throws DbException {
        // some code goes here
        // not necessary for lab1
    	
    	//calls discard page on a random page from the cache
    	this.discardPage(this.pages.keys().nextElement());
    }

}
